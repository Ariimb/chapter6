Exercise 6-1: Write a program to find the square of the distance between two points.
#include <stdio.h>
#include <math.h>

int main() {
	float x1, y1, x2, y2, gdistance;
	printf("Input x1: ");
	scanf("%f", &x1);
	printf("Input y1: ");
	scanf("%f", &y1);
              printf("Input x2: ");
	scanf("%f", &x2);
	printf("Input y2: ");
	scanf("%f", &y2);
	gdistance = ((x2-x1)*(x2-x1))+((y2-y1)*(y2-y1));
	printf("Distance between the said points: %.4f", sqrt(gdistance));
	printf("\n");
	return 0;
}


Exercise 6-2: A professor generates letter grades using Table 6 -3. 
 
	Table 6-3. Grade Values  	
	      % Right 		Grade 
0-60 		          F 	
61-70 		        D 	
71-80 		        C 	
81-90 		        B 	
91-100 		        A 	

Given a numeric grade, print the letter. 

#include <stdio.h>

char line[20];             
char plusminus;

int main() {
    printf("insert your score: ");      // ask for the score
    fgets(line, sizeof(line), stdin);
    sscanf(line, "%d", &score);

    if (score <= 60) {
        printf("F");
    }
    if (score <= 70 && score >60) {
        printf("D");
    }
    if (score <= 80 && score >70) {
        printf("C");
    }
    if (score <= 90 && score >80) {
        printf("B");
    }
    if (score <= 100 && score >90) {
        printf("A");
    }


Exercise 6-3: Modify the previous program to print a + or - after the letter grade,  based on the last digit of the score. The modifiers are listed in Table 6-4. 
 
	Table 6-4. Grade Modification Values  
	    Last digit   	Modifier 
1-3 		          - 
4-7 		       <blank> 
8-0 		          + 

#include <stdio.h>

char line[20];             
char plusminus;

int main() {
    printf("insert your score: ");      // ask for the score
    fgets(line, sizeof(line), stdin);
    sscanf(line, "%d", &score);

    if (score <= 60) {
        printf("F");
    }
    if (score <= 70 && score >60) {
        printf("D");
    }
    if (score <= 80 && score >70) {
        printf("C");
    }
    if (score <= 90 && score >80) {
        printf("B");
    }
    if (score <= 100 && score >90) {
        printf("A");
    }

if ((score - 1) % 10 < 2) {
    printf("-");
} else if ((score - 1) % 10 > 7) {
    printf("+");
}

Exercise 6-4: Given an amount of money (less than $1.00), compute the number of quarters, dimes, nickels, and pennies needed. 
#include <stdio.h>

char line[100];             /* line of input from keyboard */
int cents;                  /* number of cents we have */
int quarters = 0;           /* number of quarters */
int dimes = 0;              /* number of dimes */
int nickels = 0;            /* number of nickels */
int pennies = 0;            /* number of pennies */

int main() {
	printf("Enter the number of cents we have: ");
	fgets(line, sizeof(line), stdin);
	sscanf(line, "%d", &cents);

	if (cents > 99) {
		printf("Error: has to be less than $1.00\n");
		return(1);
	} else if (cents < 1) {
		printf("Error: can not be less than a penny\n");
		return(1);
	}

	while (1) {
		if (cents >= 25) {
			++quarters;
			cents -= 25;
		} else if (cents >= 10) {
			++dimes;
			cents -= 10;
		} else if (cents >= 5) {
			++nickels;
			cents -= 5;
		} else if (cents >= 1) {
			++pennies;
			--cents;
		} else if (cents == 0) {
			break;
		}
	}

	printf("%d quarters %d dimes %d nickels %d pennies\n",
		quarters, dimes, nickels, pennies);

	return(0);
}	
	
    

Exercise 6-5: A leap year is any year divisible by 4, unless the year is divisible by 100, but not 400. Write a program to tell if a year is a leap year. 

#include <stdio.h>

int main() {
   int year;
   year = 2016;

   if (((year % 4 == 0) && (year % 100!= 0)) || (year%400 == 0))
      printf("%d is a leap year", year);
   else
      printf("%d is not a leap year", year);

   return 0;
}

 Exercise 6-6: Write a program that, given the number of hours an employee worked and the hourly wage, computes the employee's weekly pay. Count any hours over 40 as overtime at time and a half. 
 
#include <iostream>
int main()
{
std::cout << "\nHourly workers pay:\n";
//Get hourly rate

std::cout << "Hourly rate: $";
double rate;
std::cin >> rate;
//Get hours worked

std::cout << "Hours worked: ";
double hours;
std::cin >> hours;

//calculate pay
double pay;

//check for overtime
if(hours > 40.0)

{
//standard rate
pay += rate * 40;

//overtime rate
pay += (rate * 1.5) * (hours - 40);
}

else
pay += rate * hours;

//results
if(std::cin.good())
std::cout << "The hourly workers pay is: $" << pay << "\n" << std::endl;
return 0;
}

Exercise 6-7: Write a program that calculates the number of days in a month.

#include <stdio.h> 
  
// Function to find the number of Days
void printNumberOfDays(int N) 
{ 
  
    // Check for 31 Days 
    if (N == 1 || N == 3 || N == 5 
        || N == 7 || N == 8 || N == 10 
        || N == 12) { 
        printf("31 Days."); 
    } 
  
    // Check for 30 Days 
    else if (N == 4 || N == 6 
             || N == 9 || N == 11) { 
        printf("30 Days."); 
    } 
  
    // Check for 28/29 Days 
    else if (N == 2) { 
        printf("28/29 Days."); 
    } 
  
    else { 
        printf("Invalid Month."); 
    } 
} 
  

int main() 
{ 
    // Input Month 
    int N = 4; 
  
    printNumberOfDays(N); 
  
    return 0; 
} 



